关于拦截器interceptors
1.实现一个拦截器MyInterceptor,MyInterceptor实现Interceptor,实现它的三个方法
    public Object intercept(Invocation invocation) throws Throwable {
        return null;
    }

    public Object plugin(Object target) {
        return null;
    }

    public void setProperties(Properties properties) {

    }
2.配置全局配置文件config的插件声明
    <!-- 配置插件 -->
    <plugins>
        <plugin interceptor="org.and.interceptor.MyInterceptor"></plugin>
    </plugins>
3.在需要使用插件的地方加入注解,只可以用在类文件上
    @CacheNamespace(implementation = RedisCache.class)
    @Intercepts({
            @Signature(type = ResultSetHandler.class, method = "handleResultSets", args = {Statement.class})
    })
    public interface UserMapper {
        User selectByPrimaryKey(Long id);
        List<User> selectByNameAndPwd(String name, String pwd);
        @Options()
        List<User> selectByNameAndPwd1(Map<String, String> map);
        void addAll(@Param("users") List<User> users);

        List<User> selectByInstance(@Param("user") User user);

        @Results(id = "BaseAnResultMap",value = {
            @Result(property = "id",column = "id",id = true),
            @Result(property = "name",column = "name"),
            @Result(property = "pwd",column = "pwd")
        }
        )
        @SelectProvider( type = SelectProviderCandicate.class,method = "selectSql")
        List<User> selectByInstance2(@Param("user") User user);

        List<User> associationQueryA();
        List<User> getUsers();
        List<Address> getAddresses();
    }
4.能够被拦截的接口及其方法列表
(1)Executor :该接口的
    1.1 int update(MappedStatement ms, Object parameter) throws SQLException;
    1.2 <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException;与其同名但是参数更多的重载方法不能被拦截,这是mybatis设计的原因.
    1.3 <E> Cursor<E> queryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds) throws SQLException;
    1.4 List<BatchResult> flushStatements() throws SQLException;
    1.5 void commit(boolean required) throws SQLException;
    1.6 void rollback(boolean required) throws SQLException;
    1.7 Transaction getTransaction();
    1.8 void close(boolean forceRollback);
    1.9 boolean isClosed();
(2)ParameterHandler:全部可以
    2.1 getParameterObject执行执行存储过程时才会调用
    2.2 void setParameters(PreparedStatement ps) 所有设置SQL参数时都会调用.
(3)ResultSetHandler :
    3.1 <E> List<E> handleResultSets(Statement stmt) throws SQLException;//除了执行存储过程,其他的都会被调用
    3.2 <E> Cursor<E> handleCursorResultSets(Statement stmt) throws SQLException;//只会在支持游标查询的数据库使用游标查询时采用
    3.3 void handleOutputParameters(CallableStatement cs) throws SQLException;//只有存储过程出参时调用
(4)StatementHandler:
    4.1 Statement prepare(Connection connection, Integer transactionTimeout) throws SQLException;
    4.2 void parameterize(Statement statement) throws SQLException;
    4.3 void batch(Statement statement) throws SQLException;
    4.4 <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException;
    4.5 <E> Cursor<E> queryCursor(Statement statement) throws SQLException;
